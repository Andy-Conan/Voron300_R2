#####################################################################
#   Macros
#####################################################################

[gcode_macro M0]
gcode:
    PAUSE
#####################################################################

[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    #BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default

[gcode_macro G32]
gcode:
    # SET_PIN PIN=caselight VALUE=1
    # SET_FAN_SPEED FAN=Nevermore SPEED=0.95
    #STATUS_HEATING
    # Set and wait for bed to reach temperature for Tap
    #M190 S100
    # Set and wait for nozzle to reach temperature
    #M109 S150
    #{% set BED_TEMP = params.BED_TEMP|default(90)|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    # Set and wait for bed to reach temperature for Tap
    #M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    #M109 S{EXTRUDER_TEMP}
    #-------------------------------------------------------------------
    BED_MESH_CLEAR
    STATUS_HOMING
    G90
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE
    STATUS_HOMING
    G28
    #BED_MESH_CALIBRATE
    #BED_MESH_PROFILE LOAD="default"
    STATUS_READY
    #--------------------------------------------------------------------
    #CALIBRATE_Z
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode: 
    {% set temp_bed      = params.BED|int %}
    {% set temp_EXTRUDER   = params.EXTRUDER|int %}
    M190 S{temp_bed}                                 ; wait for bed temp
    # G4 P600000                                       ; wait 10 minutes for the bed temp to stabilize further
    # M109 S{temp_EXTRUDER}                          ; set and wait for extruder temp
    G90                                              ; absolute positioning
    G28
    BED_MESH_CLEAR
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    #BED_MESH_CALIBRATE ADAPTIVE=1
    CLEAN_NOZZLE
    G1 Z50 F3000                                   ; move nozzle away from bed
    M109 S{temp_EXTRUDER}                          ; set and wait for extruder temp
    G1 Z10 F3000                                   ; move nozzle away from bed
    G1 X20 Y5 Z10 F5000.0                          ; Move to start position
    G1 X20 Y5 Z0.2                                 ; 
    G1 X250 Y5.0 Z0.2 F1500.0 E15                  ; Draw the first line
    G1 X250 Y8.0 Z0.2 F5000.0                      ; Move to side a little
    G1 X20 Y8 Z0.2 F1500.0 E30                     ; Draw the second line
    G92 E0                                         ; Reset extruder
    G1 Z10.0 F3000                                 ; Move Z axis up little to prevent scrathing of Heat Bed

    #G90
    #G28
    #M140 S{ params.BED_TEMP }   ; set bed temp
    #M190 S{ params.BED_TEMP }   ; wait for bed temp
    #M109 S150                   ; set extruder temp to 150C
    #QUAD_GANTRY_LEVEL
    #BED_MESH_CALIBRATE PROFILE=voron
    #BED_MESH_PROFILE LOAD=voron
    #G0 X175 Y175 Z100 F3600     ; move nozzle away from bed
    #M104 S{ params. TOOL_TEMP } ; set extruder temp
    #M109 S{ params. TOOL_TEMP } ; wait for extruder temp
        
#####################################################################   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    # SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                                       ; wait for buffer to clear
    G92 E0                                                     ; zero the extruder
    G1 E-5.0 F1800                                             ; retract filament
    TURN_OFF_HEATERS
    G90                                                        ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                    ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                                       ; turn off fan
    CLEAN_NOZZLE
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    #RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
#####################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
#####################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
#####################################################################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

#####################################################################
#   G2 / G3
#####################################################################
[gcode_arcs]
resolution: 0.1

[gcode_macro m201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M900]
gcode:
      SET_PRESSURE_ADVANCE ADVANCE={params.K}

#####################################################################
#   BED_MESH_CALIBRATE
#####################################################################
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#; gcode parameters
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
#; the clearance between print area and probe area 
#variable_mesh_area_offset : 5.0
#; number of sample per probe point
#variable_probe_samples : 2
#; minimum probe count
#variable_min_probe_count : 4
#; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
#variable_probe_count_scale_factor : 1.0
#; enable preference index
#variable_enable_reference_index : False
#gcode:
#    {% if params.AREA_START and params.AREA_END %}
#        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

#    {% set area_min_x = params.AREA_START.split(",")[0]|float %}
#	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
#	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
#	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

#	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
#            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#        {% else %}
#            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
#        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}